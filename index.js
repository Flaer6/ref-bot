const { Telegraf, Markup, Scenes, session } = require('telegraf')
const mongoose = require('mongoose')
const moment = require('moment')

const bot = new Telegraf('token') //—Ç–æ–∫–µ–Ω –±–æ—Ç–∞

const ADMINS = [] //id –∞–¥–º–∏–Ω–æ–≤
const refCount = 750 //—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1 —Ä–µ—Ñ–µ—Ä–∞–ª–∞
const minWithdraw = 20000 //–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
const botUrl = 'link' // —é–∑–µ—Ä –±–æ—Ç–∞ (–±–µ–∑ @)

const mainMenu = Markup.keyboard([
	['üí≥ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', 'üíº –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç'],
	['üì§ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
])
	.oneTime()
	.resize()

const backMenu = Markup.keyboard([['‚è≠Ô∏è –ù–∞–∑–∞–¥']])
	.oneTime()
	.resize()

mongoose.connect(
	'mongodb+srv://ahaevviktor896:jIolaH5ki6Lrb8Yl@cluster0.fryapue.mongodb.net/?retryWrites=true&w=majority',
	{
		serverSelectionTimeoutMS: 5000,
	}
)
const db = mongoose.connection
db.on('error', console.error.bind(console, '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:'))
db.once('open', () => {
	console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB!')
})

const UserStats = mongoose.model('UserStats', {
	userId: { type: Number, unique: true },
	username: String,
	refUserId: { type: Number, default: null },
	referralCount: { type: Number, default: 0 },
	withDraw: { type: Number, default: 0 },
	startDate: { type: Date, default: Date.now },
})

bot.start(async ctx => {
	const username = ctx.message.from.first_name
	const userId = ctx.message.from.id
	const refUserId = parseInt(ctx.message.text.split(' ')[1])

	try {
		const existingUser = await UserStats.findOne({ userId: userId })

		if (!existingUser) {
			const newUser = new UserStats({
				userId: userId,
				username: username,
				refUserId: !isNaN(refUserId) ? refUserId : null,
			})

			if (!isNaN(refUserId)) {
				await UserStats.updateOne(
					{ userId: refUserId },
					{ $inc: { referralCount: 1 } }
				)

				// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ refUserId –Ω–µ —è–≤–ª—è–µ—Ç—Å—è null
				if (refUserId !== null) {
					ctx.telegram.sendMessage(
						refUserId,
						`üë§ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –Ω–∞ ${refCount}UZS`
					)
				}
			}

			await newUser.save()
		}
	} catch (error) {
		console.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error}`)
	}

	ctx.replyWithHTML(
		`<b>üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${ctx.message.from.first_name}!</b>`,
		mainMenu
	)
})

//–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å
bot.hears('üí≥ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', async ctx => {
	const userId = ctx.message.from.id
	const refUrl = `https://t.me/${botUrl}?start=${userId}`
	const user = await UserStats.findOne({ userId: userId })
	await ctx.replyWithHTML(
		`<b>üöÄ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>üíµ –ú—ã –ø–ª–∞—Ç–∏–º:</b>\n1 –†–µ—Ñ–µ—Ä–∞–ª - ${refCount}UZS\n\n<b>üë§ –í–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ:</b>\n${user.referralCount} –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤\n\n<b>üîó –í–∞—à–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>${refUrl}</code>`,
		Markup.inlineKeyboard([
			[
				Markup.button.url(
					'‚ôªÔ∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π',
					`https://t.me/share/url/?url=–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞! üéâ –ü—Ä–∏–≥–ª–∞—à–∞–π —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã! üéÅ\n ${refUrl}
					`
				),
			],
		])
	)
})

//–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç
bot.hears('üíº –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç', async ctx => {
	const userId = ctx.message.from.id
	const user = await UserStats.findOne({ userId: userId })
	const startDate = moment(user.startDate)
	const currentDate = moment()
	const daysUsed = currentDate.diff(startDate, 'days')
	await ctx.replyWithHTML(
		`
		<b>üì± –í–∞—à –∫–∞–±–∏–Ω–µ—Ç:</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>üë§ –ò–º—è:</b> ${
			ctx.message.from.first_name
		}\n<b>üîë –í–∞—à ID:</b> <code>${userId}</code>\n<b>üïú –î–Ω–µ–π –≤ –±–æ—Ç–µ:</b> ${daysUsed}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>üí≥ –ë–∞–ª–∞–Ω—Å:</b>\n‚óè –û—Å–Ω–æ–≤–Ω–æ–π: <b>${
			user.referralCount * refCount - user.withDraw
		}UZS</b>\n‚óè –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${
			user.referralCount * refCount
		}UZS</b>\n‚óè –û–∂–∏–¥–∞–µ—Ç—Å—è –∫ –≤—ã–ø–ª–∞—Ç–µ: <b>${
			user.withDraw
		}UZS</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏:</i>
		`,
		Markup.inlineKeyboard([[Markup.button.callback('üì§ –í—ã–≤–µ—Å—Ç–∏', 'withdraw')]])
	)
})

//–í—ã–≤–µ—Å—Ç–∏
const withdrawContent = async ctx => {
	const userId = ctx.from.id
	const user = await UserStats.findOne({ userId: userId })
	await ctx.replyWithHTML(
		`
		<b>üí∏ –í–∞—à –±–∞–ª–∞–Ω—Å: ${
			user.referralCount * refCount - user.withDraw
		}UZS</b>\n<b>‚≠ïÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${minWithdraw}UZS</b>\n\n<b>üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:</b>
		`,
		Markup.inlineKeyboard([
			[Markup.button.callback('üí≥ UZCARD / HUMO', 'withdrawCallback')],
		])
	)
}

const sceneWithdraw = new Scenes.WizardScene(
	'sceneWithdraw',
	ctx => {
		ctx.replyWithHTML('<b>‚úÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/–∫–æ—à–µ–ª—å–∫–∞:</b>', backMenu)
		return ctx.wizard.next()
	},
	ctx => {
		if (ctx.message.text.length < 16 || !/^\d+$/.test(ctx.message.text)) {
			ctx.reply('‚≠ïÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!')
			return
		} else {
			ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞')
			return ctx.wizard.next()
		}
	},
	async ctx => {
		const user = await UserStats.findOne({ userId: ctx.from.id })
		const withdrawalAmount = parseInt(ctx.message.text)

		if (isNaN(withdrawalAmount)) {
			ctx.reply('‚≠ïÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
			return
		}
		switch (true) {
			case withdrawalAmount < minWithdraw:
				ctx.replyWithHTML(`‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ ${minWithdraw} UZS`)
				break

			case withdrawalAmount > user.referralCount * refCount:
				ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', mainMenu)
				return ctx.scene.leave()
				break

			default:
				// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –Ω–∞ –≤—ã–≤–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
				user.withDraw = withdrawalAmount
				await user.save()
				ctx.reply('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ', mainMenu)
				return ctx.scene.leave()
		}
	}
)

const sceneSendAll = new Scenes.WizardScene(
	'sceneSendAll',
	ctx => {
		ctx.reply('–í–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', backMenu)
		return ctx.wizard.next()
	},
	async ctx => {
		const allUsers = await UserStats.find({}, { userId: 1 })
		for (const user of allUsers) {
			try {
				await bot.telegram.sendMessage(user.userId, ctx.message.text)
			} catch (error) {
				console.error(
					`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.userId}:`,
					error.message
				)
			}
		}
		await ctx.reply('–ü–æ—Å—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
		return ctx.scene.leave()
	}
)

const stage = new Scenes.Stage([sceneWithdraw, sceneSendAll])
stage.hears('‚è≠Ô∏è –ù–∞–∑–∞–¥', ctx => {
	ctx.reply('üíª –ú–µ–Ω—é', mainMenu)
	ctx.scene.leave()
})
bot.use(session())
bot.use(stage.middleware())

bot.hears('üì§ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏', ctx => withdrawContent(ctx))
bot.action('withdraw', ctx => withdrawContent(ctx))
bot.action('withdrawCallback', ctx => ctx.scene.enter('sceneWithdraw'))

//–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', async ctx => {
	const startDate = new Date('2023-12-25')
	const currentDate = new Date()
	const daysWorked = Math.floor(
		(currentDate - startDate) / (24 * 60 * 60 * 1000)
	)
	try {
		ctx.replyWithHTML(
			`
			<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞:</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>‚è≥ –°—Ç–∞—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞:</b> ${startDate.toLocaleDateString()}\n<b>üïú –†–∞–±–æ—Ç–∞–µ–º –¥–Ω–µ–π:</b> ${daysWorked}\n<b>üë® –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${
				(await UserStats.countDocuments()) + 3500
			}
			`,
			Markup.inlineKeyboard([
				[Markup.button.url('üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 't.me/zasa_diey1')],
			])
		)
	} catch (error) {
		console.error(`–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error}`)
		ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ :(')
	}
})

//–ê–¥–º–∏–Ω–∫–∞
bot.command('admin', ctx => {
	if (ADMINS.includes(ctx.from.id)) {
		ctx.reply(
			'–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞:',
			Markup.inlineKeyboard([[Markup.button.callback('–†–∞—Å—Å—ã–ª–∫–∞', 'sendAll')]])
		)
	}
})
bot.action('sendAll', ctx => ctx.scene.enter('sceneSendAll'))

bot.launch()
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))
